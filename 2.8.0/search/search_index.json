{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Arcan Documentation","text":"<p>Arcan is an automatic tool for software quality analysis and (Architectural) Technical Debt detection, evaluation and visualisation.</p> <p>Arcan helps you keep Technical Debt under control and avoid its shortcomings. The tool analyses\u00a05 programming languages and integrates into your\u00a0CI pipeline\u00a0to ensure that your code continuously meets high-quality standards.</p> <p>The analysis is available for the following programming languages:</p> <ul> <li>Java</li> <li>C</li> <li>C++</li> <li>C#</li> <li>Python</li> </ul> <p>More languages are coming next!</p>"},{"location":"#architectural-technical-debt","title":"Architectural Technical Debt","text":"<p>The backbone of a software system is its architecture. Software architectures need to continuously update, adapt and change. Software maintenance and evolution become expensive, time-consuming, and sometimes impossible if architecture quality is not continuously assessed. </p> <p>The accumulation of sub-optimal architectural solutions inside a software system results in the growth of Architectural Technical Debt, a segment of a bigger problem (Technical Debt) that costs 500 billion dollars worldwide. </p>  <p>33% of the time of a developer is wasted to manage technical debt.</p>  <p>This problem manifests itself in specific contexts, for instance when there is the need to migrate an obsolete technology or when there is the need to fast scale up the number of features of a software application. However, the deepest sources causing this problem can hardly be detected by hand, and software developers lack the tools to detect them. </p> <p>We offer a platform for automatic source code analysis that assesses the quality of software architectures in a few minutes. Arcan indicates the exact pain points in the code so that developers can fix them and make the code easy to program. The most innovative facet of Arcan is the ability to extract strategic data regarding Architectural Technical Debt so that managers can make informed decisions about software production and optimization. </p>"},{"location":"#architectural-smells","title":"Architectural Smells","text":"<p>A symptom of Architectural Technical Debt is the presence of Architectural Smells, design decisions that negatively impact the system internal quality. Arcan main aim is to automatically detect Architectural Smells, indicate where they are located in code and suggest best practices about how to remove them.  Refactoring Architectural Smells is the activity of removing Architectural Smells from the system by reorganising the code and/or the architecture of the affected artefacts according to a new design. This is a effortful activity, thus it is only adopted as the last resort. Typically, it is preferred to avoid at all the introduction of Technical Debt (e.g. Architectural Smells) by ensuring only clean new code is committed to the codebase.</p> <p>Architectural Smells come in different types. Here you can find the updated lists of the ones detected by Arcan and here are the descriptions of the best practices to remove them.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>To download our 30-days trial, please visit www.arcan.tech. You will need docker installed on your machine to run Arcan, but don't worry! You don\u2019t need to know how Docker works to use Arcan.</p>  <p>You can also have a quick look to the tool with the Arcan online demo.</p>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Quickstart</li> <li>Arcan glossary</li> <li>Guide to results inspection</li> </ul>"},{"location":"#get-a-yearly-license","title":"Get a yearly license","text":"<p>Arcan is distributed on-premise and in the cloud with yearly licence. Pricing depends on the size of the application portfolio to analyse and the number of needed floating licenses.</p> <p>Contact us at info@arcan.tech or leave a message on our website to get a quote.</p>"},{"location":"#support","title":"Support","text":"<p>If you find a bug or want to suggest a new feature create a new issue on Github: https://github.com/Arcan-Tech/arcan-issues-public. If you  need further support or want to know more about Arcan, contact us at info@arcan.tech or leave a message on our website.</p>"},{"location":"analyse_project/","title":"Analyse a new project","text":"<p>To analyse a new project, run Arcan and click the ADD NEW button on the top-right corner. </p> <p>Fill the \"Analyse new project\" form in the following way:</p> <ul> <li>Name: indicate the name of the project you want to analyse.</li> <li>Language: select the programming language you want to analyse.</li> <li>Type: Select \"Local project\" for projects residing in the same server where Arcan runs or \"Remote\" for projects residing in a remote repository (e.g., Github repository).</li> </ul>"},{"location":"analyse_project/#analyse-a-remote-repository","title":"Analyse a remote repository","text":"<ol> <li>Choose type \"Remote project\" in the \"Add new project\" page.</li> <li>Paste the url pointing to the remote repository. You can only use HTTPS URL like <code>https://github.com/user/repo.git</code></li> <li>If the repostiory is private and thus requires authentication, tick the \"Project requires authentication\" box.</li> <li>In the case of analysis of a remote repository requiring authentication, you need to create an access token on your repository provider. How to do that depends on the provider you are using. Here some instructions for the most popular ones:<ul> <li>Github</li> <li>Gitlab</li> <li>Bitbucket</li> </ul> </li> <li>Username: insert here the username you use on the repository provider platform.</li> <li>Password: Insert here the access token you generated.</li> </ol>"},{"location":"analyse_project/#analyse-a-local-repository","title":"Analyse a local repository","text":"<p>In the case of analysis of a local folder, you need to:</p> <ol> <li>Copy the folder you want to analyse into /arcan-trial/projects folder.</li> <li>In the Add New Project form, you must insert <code>./projects/&lt;folder_name&gt;</code></li> </ol>"},{"location":"architectural_smells/","title":"Architectural Smells","text":"<p>Arcan bases the estimate of Technical Debt on the detection of Architectural Smells, software design decisions that negatively impact the software quality. Smells violates design principles.</p> <p>At the moment, Arcan detects four types of Architectural Smells:</p> <ul> <li>Cyclic Dependency</li> <li>God Component</li> <li>Hub-Like Dependency</li> <li>Unstable Dependency</li> </ul>"},{"location":"architectural_smells/#cyclic-dependency","title":"Cyclic Dependency","text":"<p>When two or more architectural components are involved in a chain of relationships. </p>"},{"location":"architectural_smells/#drawbacks","title":"Drawbacks","text":"<p>The architectural components involved in a Cyclic Dependency are:</p> <ul> <li>hard to release</li> <li>hard to maintain</li> <li>hard to reuse in isolation</li> </ul> <p>The smell violates the Acyclic Dependencies Principle defined by R. C. Martin.</p>"},{"location":"architectural_smells/#god-component","title":"God Component","text":"<p>this smell occurs when an architectural component is excessively large in terms of LOC (Lines Of Code). </p>"},{"location":"architectural_smells/#drawbacks_1","title":"Drawbacks","text":"<p>The architectural component affected by God Component:</p> <ul> <li>centralizes logic</li> <li>has low cohesion within</li> <li>has increasing complexity</li> </ul> <p>The smell violates the Modularity Principle defined by R. C. Martin.</p>"},{"location":"architectural_smells/#hub-like-dependency","title":"Hub-Like Dependency","text":"<p>When an architectural component has (outgoing and ingoing) dependencies with a large number of other components. The component affected by HL ,  and . </p>"},{"location":"architectural_smells/#drawbacks_2","title":"Drawbacks","text":"<p>The component affected by the smell:</p> <ul> <li>centralizes logic</li> <li>is a unique point of failure</li> <li>favors change ripple effects</li> </ul> <p>The smell violates the Modularity Principle defined by R. C. Martin.</p>"},{"location":"architectural_smells/#unstable-dependency","title":"Unstable Dependency","text":"<p>describes an architectural component that depends on other components that are less stable than itself. Instability (proneness to change) is measured using R. C. Martin\u2019s formula.</p>"},{"location":"architectural_smells/#drawbacks_3","title":"Drawbacks","text":"<p>The component affected by the smell can:</p> <ul> <li>favors change ripple effects</li> <li>be subjected to frequent changes</li> </ul> <p>The smell violates the Stable Dependency Principle defined by R. C. Martin.</p>"},{"location":"get_started/","title":"Get Started","text":""},{"location":"get_started/#download-and-install-arcan","title":"Download and Install Arcan","text":"<p>This is the quickstart guide to install and run the first analysis with Arcan. See the complete reference for the alternative installation without Docker.</p>"},{"location":"get_started/#requirements","title":"Requirements","text":"<ul> <li>Docker Engine &gt;= 20.10 (See https://docs.docker.com/engine/install)</li> <li>Docker Compose (See https://docs.docker.com/compose/install/)</li> </ul>"},{"location":"get_started/#how-to-run-arcan-locally","title":"How to run Arcan locally","text":"<ol> <li>Clone or download Arcan from Github. </li> <li>Fill in this form. You will receive the license at the provided email address.</li> <li>Open the email and download the attached <code>ArcanLicence_YYYYMMDD</code> licence file.</li> <li>Copy the <code>ArcanLicence_YYYYMMDD</code> licence file to the licences directory.</li> </ol>"},{"location":"get_started/#configure-the-environment","title":"Configure the environment","text":"<ol> <li>Copy the content of the .env.example file into a new file named <code>.env</code>.</li> <li>Change the value of the variable <code>ARCAN_LICENCE_FILENAME</code> with the name of licence file you copied in the licences directory.</li> </ol>"},{"location":"get_started/#run-arcan","title":"Run Arcan","text":"<ol> <li>To run the Arcan dashboard and the server, open your favourite terminal and navigate to the <code>/arcan-trial</code> folder. Within the folder execute: <code>docker compose up</code>.</li> <li>You will find the dashboard at http://localhost:3000.</li> </ol>"},{"location":"get_started/#create-and-analyse-a-new-project","title":"Create and analyse a new project","text":"<p>Open Arcan dashboard at http://localhost:3000.</p> <p>Click the \"ADD NEW \" button to analyse a new project.</p> <ol> <li>Fill out the form on the \"Add new project\" page with the project's name and the programming language you want to analyse.</li> <li>Indicate the location of the project you want to analyse:<ul> <li>To analyse a remote project, use the remote repo URL when creating a new project. If the repository is private, remember to use a personal access token as password by ticking the \"Project requires authentication\" box (see How to analyse a remote repository for more info).</li> <li>To analyse a local project, copy the project folder into <code>/arcan-trial/projects</code>. When creating a new project, specify the path to analyse as follows: <code>./projects/&lt;folder_name&gt;</code> (see How to analyse a local repository for more info).</li> </ul> </li> <li>In \"Configure analysis\" click on \"ANALYSE\" and then \"CONTINUE\" to trigger the analysis. Once the analysis is completed, you can interact with the project card on the \"My projects\" page.</li> </ol>"},{"location":"get_started/#support","title":"Support","text":"<p>If you find a bug or want to suggest a new feature create a new issue on Github: https://github.com/Arcan-Tech/arcan-issues-public. If you  need further support or want to know more about Arcan, contact us at info@arcan.tech or leave a message on our website.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#glossary","title":"Glossary","text":""},{"location":"glossary/#project","title":"Project","text":"<p>The software project that you want to analyse with Arcan. It can be a folder containing source code or a Git repository (local or remote, e.g., hosted on Github).</p>"},{"location":"glossary/#version","title":"Version","text":"<p>Every time you change something in your project's source code, Arcan tracks a new version. You can run Arcan multiple times on different versions of the same project. Versions can be mapped to commits if you run Arcan on a Git repository.</p>"},{"location":"glossary/#analysis","title":"Analysis","text":"<p>A single execution of Arcan. An analysis is associated to a specific project\u2019s version.</p>"},{"location":"glossary/#page","title":"Page","text":"<p>A page of Arcan which contains dashboards or results.</p>"},{"location":"glossary/#architectural-smell","title":"Architectural smell","text":"<p>A software architecture problem affecting one or more parts of a codebase. See here for more information.</p>"},{"location":"glossary/#plot","title":"Plot","text":"<p>A graphic showing an insight or result.</p>"},{"location":"glossary/#dependency-graph","title":"Dependency Graph","text":"<p>The high-level representation of the project\u2019s architecture. </p>"},{"location":"glossary/#container","title":"Container","text":"<p>In Arcan, the architectural components at the highest level of abstraction. Language reference: </p> <ul> <li>Java: package=container;</li> <li>C/C++: folder=container;</li> <li>C#: namespace=container;</li> <li>Python: python package=container, directory=container.</li> </ul>"},{"location":"glossary/#unit","title":"Unit","text":"<p>In Arcan, the architectural components at the lowest level of abstraction. Language reference: </p> <ul> <li>Java: class=unit;</li> <li>C/C++: file=unit;</li> <li>C#: class=unit;</li> <li>Python: python module=unit, file=unit.</li> </ul>"},{"location":"inspect_project/","title":"Inspect a project","text":"<p>On the \"My projects\" page, you can find projects' cards. </p>"},{"location":"inspect_project/#project-card","title":"Project card","text":"<p>A project card shows: </p> <ul> <li>\u2460 TD index: the non-normalized amount of the TD generated by the architectural smells instances detected in the project. The higher the value, the more TD.</li> <li>\u2461 TD rating: categorizes the TD score ranges into ranked categories ranging from A to F, with F being the worst possible rate (high accumulation of technical debt).</li> <li>\u2462 TD score: the percentile of the TD density for a benchmark of other systems analyzed by Arcan. The higher the value, the lower the TD density and the better the system's quality.  <p>Example: 75 TD score = system has lower TD density than 75% of the systems in the benchmark.</p>  </li> <li>\u2463 The trend of Technical Debt over time (green line).</li> <li>\u2464 The number of smells resulting from the latest analysis.</li> <li>\u2465 The number of lines of code (LOC) resulting from the latest analysis.</li> </ul>    Number in Figure Description       \u2460 The non-normalized amount of the TD generated by the architectural smells instances detected in the project. The higher the value, the more TD.     \u2461 TD rating: categorizes the TD score ranges into ranked categories ranging from A to F, with F being the worst possible rate (high accumulation of technical debt).     \u2462 TD score: the percentile of the TD density for a benchmark of other systems analyzed by Arcan. The higher the value, the lower the TD density and the better the system's     \u2463 The trend of Technical Debt over time (green line).     \u2464 The number of smells resulting from the latest analysis.     \u2465 The number of lines of code (LOC) resulting from the latest analysis.      <p>Click on \"INSPECT\" or on the project's name to inspect the analysis results in detail.</p>"},{"location":"inspect_project/#overview-page","title":"Overview page","text":"<p>This page offers an overview of the analysed project's overall quality and Technical Debt.</p> <ul> <li>\u2460 Technical Debt Dispersion: When high, it means that Technical Debt affects multiple and sparse portions of the code. When low, it means that Technical Debt is concentrated in a specific part of the code. The latest scenario is desirable because it is easier to address and solve Technical Debt when delimited.</li> <li>\u2461 Technical Debt Spread: The percentage of code affected by Technical Debt.</li> <li>\u2462 Technical Debt: the number of man-hours needed to remove the detected architectural smells.</li> <li>\u2463 Design Complexity: the ratio between the number of architectural dependencies and the number of architectural components. When high, the code is tangled and very coupled, going against the modularity and separation of concerns principle.</li> <li>\u2464 Rigidity: computed with the Instability Metric defined by Robert Martin. When high, the code is sensitive to change proneness (a single change causes multiple cascade changes, making maintenance difficult).</li> <li>\u2465 Technical Debt Evolution: the trend of Technical Debt along the code history. The plot appears if more than one project version is analysed.</li> <li>\u2466 List of analysed versions: The list of analysed versions. If the analysed repository is a Git repository, the list reports the version (commit) hash.</li> </ul>"},{"location":"inspect_project/#assessment-page","title":"Assessment page","text":"<p>The table shows the list of architectural smells and some of their characteristics. </p> <p>Each row contains the data of a single instance of Architectural Smell.</p> <p>Click on the name of a column to sort by it.</p> <p>Table description: - \u2460 ID: the unique identifier of the Architectural Smell. - \u2461 Smell Type: the type of Architectural Smells. At the moment, Arcan detects four smells: \"Cyclic Dependency\", \"God Component\", \"Hub-Like Dependency\", and \"Unstable Dependency\". - \u2462 Tech debt index: the amount of Technical Debt caused by the single Architectural Smell. The sum of the Technical Debt of each smell corresponds to the Technical Debt index reported in the project card. - \u2463 Severity: indicates how much the Architectural Smell is critical for the project. It is based on the smell's characteristics (such as size and shape) and it is computed thanks to a proprietary machine learning model trained on manually-classified examples. - \u2464 Affected type: indicates the type of the affected component (e.g., for Java, class or package). - \u2465 Affected Elements: the architectural components affected by the Architectural Smell. - \u2466 Size: the number of Architectural Components affected by the Architectural Smell.</p> <p>\u2467 To manipulate the table (e.g., filter results) and download the table data, use the commands on the top-right of the table. \u2468 Click the arrow on the left to expand the row. Here you can find information about the detection rule applied and the values of the parameters that triggered the smell detection.</p>"},{"location":"inspect_project/#architectural-smell-graph-page","title":"Architectural smell graph page","text":"<p>Click on the pink button with the smell ID to open the graph representation of the Architectural Smell.</p> <p>At the top-left of the page, you can find the controls of the graph.</p> <ul> <li>\u2460 Reload graph layout</li> <li>\u2461 Centre graph</li> <li>\u2462 Turn zoom on/off</li> </ul> <p>At the top-right of the page, you can find additional controls for graph exploration.</p> <ul> <li>\u2463 Change the layout of the graph</li> <li>\u2464 Insert the name of a unit or container to quickly find it in the graph.</li> </ul> <p>\u2465 Click either an edge or a node to show the source code. The code causing the smell and that should be refactored is highlighed in red.</p>"},{"location":"inspect_project/#comprehension-page","title":"Comprehension page","text":""},{"location":"inspect_project/#graph-settings","title":"Graph settings","text":"<p>\u2460 On this page, you can select the specific parts of code that you want to plot in the graph. (2) Use SELECT ALL and UNSELECT ALL to select or unselect all the project's components quickly.</p> <p>\u2462 You can choose the types of components and dependencies to display on the right. </p> <p>Once the configuration is set up, click on the \"Graph\" tab to show the graph.</p>"},{"location":"inspect_project/#graph","title":"Graph","text":"<p>This page offers a high-level representation of the software architecture of the project under analysis. Depending on the settings you choose, you can produce different architectural views.</p> <p>Use ctrl + left mouse click to select and drag portions of graph.</p> <p>At the top-left of the page, you can find the controls of the graph.</p> <ul> <li>\u2460 Reload graph layout</li> <li>\u2461 Centre graph</li> <li>\u2462 Turn zoom on/off</li> </ul> <p>At the top-right of the page, you can find additional controls for graph exploration.</p> <ul> <li>\u2463 Change the layout of the graph</li> <li>\u2464 Insert the name of a unit or container to quickly find it in the graph.</li> </ul> <p>\u2465 Click a node to open the \"Neighbour graph\", that is a portion of the graph containing only the nodes next (depht=1) to the selected node.</p>"},{"location":"inspect_project/#neighbour-graph","title":"Neighbour graph","text":""},{"location":"inspect_project/#architectural-views","title":"Architectural views","text":"<p>We recommend the following settings instructions to generate a set of Architectural Views.</p> <p>Project tree</p> <p>Useful to investigate how the project\u2019s containers are nested one inside the other.</p> <ul> <li>Graph layout: KLAY</li> </ul>  <p>Project container dependencies</p> <p>Useful to investigate the dependencies between different project\u2019s containers.</p> <ul> <li>Graph layout: GRID</li> </ul>  <p>Project unit hierarchies</p> <p>Useful to investigate how the project\u2019s containers are nested one inside the other.</p> <ul> <li>Graph layout: KLAY</li> </ul>  <p>Project unit usage</p> <p>Useful to identify the most used units of the project.</p> <ul> <li>Graph layout: CONCENTRIC</li> </ul>"},{"location":"installation/","title":"Install Arcan","text":""},{"location":"installation/#requirements-for-native-docker-execution-mode","title":"Requirements for native Docker execution mode","text":"<ul> <li>Docker Engine &gt;= 20.10 (See https://docs.docker.com/engine/install)</li> <li>Docker Compose (See https://docs.docker.com/compose/install/)</li> </ul>"},{"location":"installation/#requirements-for-vm-based-docker-execution-mode-using-vagrant","title":"Requirements for VM-based Docker execution mode using Vagrant","text":"<ul> <li>Vagrant</li> <li>VirtualBox</li> </ul>"},{"location":"installation/#how-to-run-arcan-locally","title":"How to run Arcan locally","text":"<p>First, Clone or download Arcan from Github. Then, follow the instructions below.</p>"},{"location":"installation/#obtain-the-licence-file","title":"Obtain the licence file","text":"<ul> <li>Fill in this form. You will receive the license at the provided email address.</li> <li>Open the email and download the attached <code>ArcanLicence_YYYYMMDD</code> licence file.</li> <li>Copy the <code>ArcanLicence_YYYYMMDD</code> licence file to the licences directory.</li> </ul>"},{"location":"installation/#configure-the-environment","title":"Configure the environment","text":"<ul> <li>Copy the content of the .env.example file into a new file named <code>.env</code>.</li> <li>Change the value of the variable <code>ARCAN_LICENCE_FILENAME</code> with the name of licence file you copied in the licences directory.</li> </ul>"},{"location":"installation/#run-arcan-with-native-docker-execution-mode","title":"Run Arcan with native Docker execution mode","text":"<ul> <li>To run the Arcan dashboard and the server, open your favourite terminal and navigate to the <code>/arcan-trial</code> folder. Within the folder execute: <code>docker compose up</code>.</li> <li>You will find the dashboard at http://localhost:3000.</li> <li>To analyse a remote project, simply use the remote repo url when creating a new project. If the repo is private, remember to use a personal access token as password (see the documentation for more info).</li> <li>To analyse a local project, copy the project folder into <code>/arcan-trial/projects</code>. When creating a new project, specify the path to analyse as follows: <code>./projects/&lt;folder_name&gt;</code>  (see the documentation for more info).</li> </ul>"},{"location":"installation/#run-arcan-with-vm-based-docker-execution-mode-using-vagrant","title":"Run Arcan with VM-based Docker execution mode using Vagrant","text":"<ul> <li>To run the Arcan dashboard and the server, open your favourite terminal and navigate to the <code>/arcan-trial</code> folder. Within the folder execute: <code>vagrant up</code>.</li> <li>You will find the dashboard at http://localhost:3000.</li> <li>To analyse a remote project, use the remote repo URL when creating a new project. If the repository is private, remember to use a personal access token as password by ticking the \"Project requires authentication\" box (see How to analyse a remote repository for more info).</li> <li>To analyse a local project, copy the project folder into <code>/arcan-trial/projects</code>. When creating a new project, specify the path to analyse as follows: <code>./projects/&lt;folder_name&gt;</code> (see How to analyse a local repository for more info).</li> </ul>"},{"location":"installation/#optional","title":"Optional","text":"<p>Should you need to update to the latest Arcan version: - Open the <code>.env</code> file. Change the value of the variable <code>ARCAN_DASHBOARD_VERSION</code> with the latest Arcan dashboard version tag. You can find the latest version here. - Change the value of the variable <code>ARCAN_SERVER_VERSION</code> with the latest Arcan server version tag. You can find the latest version here.</p>"},{"location":"refactoring/","title":"Refactoring best practices","text":""},{"location":"refactoring/#cyclic-dependency","title":"Cyclic Dependency","text":"<p>The main goal when refactoring a cycle is to break one or more dependencies. </p>"},{"location":"refactoring/#refactoring-of-cyclic-dependencies-affecting-units","title":"Refactoring of Cyclic Dependencies affecting units","text":"<p>To better exemplify the techniques, we will consider a cycle made of two units, A and B. The techniques can be applied to break larger cycles by iterating the refactoring steps.</p>   Figure 1: graphical example of Cyclic Dependency smell  <p>Depending on the characteristics of the dependency to break, different refactoring techniques can be adopted:</p> <ul> <li>Move function: move one or more functions (e.g., Java method) into the target unit. This technique is feasible when the function is not invoked within the unit itself and the only problem is that the function is misplaced.</li> <li>Extract unit: create a new unit and place all the code responsible for the cyclic dependency in it. </li> </ul>   Figure 2: example of \u201cExtract unit\u201d refactoring technique  <ul> <li>Create interface: Introduce an interface for one of the abstractions involved in the cycle. The new interface contains all methods that A calls on B. A only knows the interface that is implemented by B. Mind that this technique can be used if A only uses B and does not generate instances of B.</li> </ul>   Figure 3: example of \u201cCreate interface\u201d refactoring technique  <ul> <li>Merge units: if the units involved in the cycle represent a semantically single object, merge the units into a single unit.</li> </ul>"},{"location":"refactoring/#refactoring-of-cyclic-dependencies-affecting-containers","title":"Refactoring of Cyclic Dependencies affecting containers","text":"<p>In the case of Cyclic Dependencies affecting containers (e.g., Java packages), you can face two possibilities:</p> <ul> <li>The cycle is caused by a cycle among units. In such a case, you can apply the same techniques for breaking cycles among units.</li> <li>The cycle only exists among packages. In such a case, it is likely that there is a misplaced unit of function. You must move one of the pieces of code generating the dependency. You can follow two ways:<ul> <li>Apply move unit from one container to another in the case an entire unit or units are misplaced;</li> <li>Apply move function from one unit to another in the case one or more functions are misplaced.</li> </ul> </li> </ul>   Figure 4_a: example of container cycle caused by a cycle among units - Figure 4_b: example of container cycle caused by misplaced code"},{"location":"refactoring/#god-component","title":"God Component","text":""},{"location":"refactoring/#refactoring-of-cyclic-dependencies-affecting-containers_1","title":"Refactoring of Cyclic Dependencies affecting containers","text":"<p>The refactoring of God Components affecting containers can be carried out by splitting the content of the container into additional containers. First, you must inspect their dependencies to identify sets of cohesive units to separate. Privilege units that: </p> <ul> <li>share dependencies with a high \u201cweight\u201d value. This means they are strongly coupled. You can find the weight metric on Arcan.  </li> <li>are involved in Cyclic Dependencies. </li> </ul> <p>Once you identify sets of cohesive units, move them into newly created containers. Mind that you could unintentionally add Cyclic Dependencies among containers while moving.</p>"},{"location":"refactoring/#refactoring-of-cyclic-dependencies-affecting-units_1","title":"Refactoring of Cyclic Dependencies affecting units","text":"<p>The presence of a God component affecting containers likely implies the presence of a God Component affecting units too. In such a case, the main aim when refactoring a God component affecting units is to split it up. To do so, you can apply different techniques:</p> <ul> <li>Extract function: often, units affected by God Components contain duplicated code. You must identify the duplicated code and extract a function in this case. Then, use the function in each part of the code where the code was duplicated.</li> <li>Extract unit: if the affected unit implements different behaviors simultaneously, parts of the unit can be extracted and put into a new, separated unit. </li> </ul>"},{"location":"refactoring/#hub-like-dependency","title":"Hub-Like Dependency","text":"<p>Removing a hub means reassigning the responsibilities and roles of some classes in order to redesign their dependencies. It would ideal to split up the responsibilities of the hub across both new and already existing abstractions, so that the number of dependencies is reduced.</p> <p>To remove Hub-Like Dependency, the following refactoring techniques can come in handy:</p> <ul> <li>Extract method: Create a new method with a similar body in another class. Either turn the old method into a simple delegation or remove it altogether.</li> <li>Extract abstract unit: Create an abstract unit and move the common features to the abstract unit.</li> <li>Extract unit: Create a new unit and move the relevant fields and functions from the old unit into the new unit.</li> </ul> <p>When Arcan detects that a unit is affected by a Hub-Like Dependency, to remove it, you can apply the following steps:</p> <ol> <li>Identify the centre of the hub, that is the component having a large number of incoming and outgoing dependencies. You can find this information on Arcan.</li> <li>Work on the centre using the refactoring techniques mentioned above.</li> <li>Consider the following: <ul> <li>If you are working on a unit, try identify at least two different roles/responsibilities, then, for each one of them, create a new unit by applying \"Extract unit\". Additionally, you can also extract common functions/fields into a new superclass using \"Extract Superclass\". </li> <li>If you are working on a function, watch the incoming and the outgoing dependencies used and try to create a cohesive set of responsibilities for the function. Split the function into several different functions, each one with a different responsibility.</li> </ul> </li> </ol> <p>To remove the hub, you may also need to move the function into a different unit (you may consider creating a new unit, don not force cohesion) and thus the coupling should decrease.</p> <p>Refactoring best practices for Unstable Dependency smell are coming soon.</p>"}]}