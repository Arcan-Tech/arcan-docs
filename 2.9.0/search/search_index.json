{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Arcan Documentation","text":"<p>Arcan is an automatic tool for software quality analysis and (Architectural) Technical Debt detection, evaluation and visualisation.</p> <p>Arcan helps you keep Technical Debt under control and avoid its shortcomings. The tool analyses\u00a05 programming languages and integrates into your\u00a0CI pipeline\u00a0to ensure that your code continuously meets high-quality standards.</p> <p>The analysis is available for the following programming languages:</p> <ul> <li>Java</li> <li>C</li> <li>C++</li> <li>C#</li> <li>Python</li> </ul> <p>More languages are coming next! Learn more on language version compatibility here.</p>"},{"location":"#architectural-technical-debt","title":"Architectural Technical Debt","text":"<p>The backbone of a software system is its architecture. Software architectures need to continuously update, adapt and change. Software maintenance and evolution become expensive, time-consuming, and sometimes impossible if architecture quality is not continuously assessed. </p> <p>The accumulation of sub-optimal architectural solutions inside a software system results in the growth of Architectural Technical Debt, a segment of a bigger problem (Technical Debt) that costs 500 billion dollars worldwide. </p>  <p>33% of the time of a developer is wasted to manage technical debt.</p>  <p>This problem manifests itself in specific contexts, for instance when there is the need to migrate an obsolete technology or when there is the need to fast scale up the number of features of a software application. However, the deepest sources causing this problem can hardly be detected by hand, and software developers lack the tools to detect them. </p> <p>We offer a platform for automatic source code analysis that assesses the quality of software architectures in a few minutes. Arcan indicates the exact pain points in the code so that developers can fix them and make the code easy to program. The most innovative facet of Arcan is the ability to extract strategic data regarding Architectural Technical Debt so that managers can make informed decisions about software production and optimization. </p>"},{"location":"#architectural-smells","title":"Architectural Smells","text":"<p>A symptom of Architectural Technical Debt is the presence of Architectural Smells, design decisions that negatively impact the system internal quality. Arcan main aim is to automatically detect Architectural Smells, indicate where they are located in code and suggest best practices about how to remove them.  Refactoring Architectural Smells is the activity of removing Architectural Smells from the system by reorganising the code and/or the architecture of the affected artefacts according to a new design. This is a effortful activity, thus it is only adopted as the last resort. Typically, it is preferred to avoid at all the introduction of Technical Debt (e.g. Architectural Smells) by ensuring only clean new code is committed to the codebase.</p> <p>Architectural Smells come in different types. Here you can find the updated lists of the ones detected by Arcan and here are the descriptions of the best practices to remove them.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>To download our 30-days trial, please visit www.arcan.tech. You will need docker installed on your machine to run Arcan, but don't worry! You don\u2019t need to know how Docker works to use Arcan.</p>  <p>You can also have a quick look to the tool with the Arcan online demo.</p>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Quickstart</li> <li>Arcan glossary</li> <li>Guide to results inspection</li> <li>Walkthrough video (ENG)</li> <li>Walkthrough video (ITA)</li> </ul>"},{"location":"#get-a-yearly-license","title":"Get a yearly license","text":"<p>Arcan is distributed on-premise and in the cloud with yearly licence. Pricing depends on the size of the application portfolio to analyse and the number of needed floating licenses.</p> <p>Contact us at info@arcan.tech or leave a message on our website to get a quote.</p>"},{"location":"#community-and-support","title":"Community and Support","text":"<p>Need help or more information? There are many ways to contact us, choose your favorite here.</p>"},{"location":"analyse_project/","title":"Analyse a new project","text":"<p>To analyse a new project, run Arcan and click the ADD NEW button on the top-right corner. </p> <p>Fill the \"Analyse new project\" form in the following way:</p> <ul> <li>Name: indicate the name of the project you want to analyse.</li> <li>Language: select the programming language you want to analyse.</li> <li>Type: Select \"Local project\" for projects residing in the same server where Arcan runs or \"Remote\" for projects residing in a remote repository (e.g., Github repository).</li> </ul>"},{"location":"analyse_project/#analyse-a-remote-repository","title":"Analyse a remote repository","text":"<ol> <li>Choose type \"Remote project\" in the \"Add new project\" page.</li> <li>Paste the url pointing to the remote repository. You can only use HTTPS URL like <code>https://github.com/user/repo.git</code></li> <li>If the repostiory is private and thus requires authentication, tick the \"Project requires authentication\" box.</li> <li>In the case of analysis of a remote repository requiring authentication, you need to create an access token on your repository provider. How to do that depends on the provider you are using. Here some instructions for the most popular ones:<ul> <li>Github</li> <li>Gitlab</li> <li>Bitbucket</li> </ul> </li> <li>Username: insert here the username you use on the repository provider platform.</li> <li>Password: Insert here the access token you generated.</li> </ol>"},{"location":"analyse_project/#analyse-a-local-repository","title":"Analyse a local repository","text":"<p>In the case of analysis of a local folder, you need to:</p> <ol> <li>Copy the folder you want to analyse into /arcan-trial/projects folder.</li> <li>In the Add New Project form, you must insert <code>./projects/&lt;folder_name&gt;</code></li> </ol>"},{"location":"architectural_smells/","title":"Architectural Smells","text":"<p>Arcan bases the estimate of Technical Debt on the detection of Architectural Smells, software design decisions that negatively impact the software quality. Smells violates design principles.</p> <p>At the moment, Arcan detects four types of Architectural Smells:</p> <ul> <li>Cyclic Dependency</li> <li>God Component</li> <li>Hub-Like Dependency</li> <li>Unstable Dependency</li> </ul>"},{"location":"architectural_smells/#cyclic-dependency","title":"Cyclic Dependency","text":"<p>When two or more architectural components are involved in a chain of relationships. </p>"},{"location":"architectural_smells/#drawbacks","title":"Drawbacks","text":"<p>The architectural components involved in a Cyclic Dependency are:</p> <ul> <li>hard to release</li> <li>hard to maintain</li> <li>hard to reuse in isolation</li> </ul> <p>The smell violates the Acyclic Dependencies Principle defined by R. C. Martin.</p>"},{"location":"architectural_smells/#detection-strategy","title":"Detection strategy","text":"<p>The detection of Cyclic Dependency (CD) in Arcan is done using the dependency graph of the system that we are analysing, i.e., the graph representation of the system's architectural components and dependencies.</p> <p>CD is detected on both units and containers (e.g., classes and packages in Java). A cycle is detected whenever two or more architectural components depend upon each other in a cycle. Arcan detects CD on different types of components and uses well-known cycle detection algorithm to identify components that belong to the same cycles. The algorithms supported by Arcan are:</p> <ul> <li>Sedgewick-Wayne algorithm, a simple DFS-based algorithm to detect cycles. More information here. This is the default implementation used by Arcan. </li> <li>Tarjan's strongly connected components (SCC) algorithm. You can find more here</li> <li>Laval-Falleri's shortest cycles algorithm. You can find more here. This is the default implementation used by Arcan for Layered Cyclic Dependencies.</li> </ul>"},{"location":"architectural_smells/#god-component","title":"God Component","text":"<p>This smell occurs when an architectural component is excessively large in terms of LOC (Lines Of Code). </p>"},{"location":"architectural_smells/#drawbacks_1","title":"Drawbacks","text":"<p>The architectural component affected by God Component:</p> <ul> <li>centralizes logic</li> <li>has low cohesion within</li> <li>has increasing complexity</li> </ul> <p>The smell violates the Modularity Principle defined by R. C. Martin.</p>"},{"location":"architectural_smells/#detection-strategy_1","title":"Detection strategy","text":"<p>The detection of the God component (GC) smell is done using the size, in terms of number of lines of code, of the system analysed.</p> <p>GC is detected at the container-level (e.g., packages in Java). The smell detection is based on Lippert and Rook's definition of GC, which is based on the total number of lines of code contained in the package. While Lippert and Rook suggest to use a fixed threshold of 27.000 lines of code to detect the smell, our approach is more sophisticated and data-driven. We calculate the detection threshold dynamically. The threshold is calculated as <code>LinesOfCode = Max(LinesOfCode_System, LinesOfCode_Benchmark)</code> where each individual <code>LinesOfCode_*</code> is calculated using frequency analysis of the metric <code>LinesOfCode</code> computed on the system and the benchmark separately. The metric is calculated as the total number of lines of code of all the elemnts belonging to a specific component. The specific approach used to calculate the threshold is detailed here.</p>"},{"location":"architectural_smells/#hub-like-dependency","title":"Hub-Like Dependency","text":"<p>When an architectural component has (outgoing and ingoing) dependencies with a large number of other components. </p>"},{"location":"architectural_smells/#drawbacks_2","title":"Drawbacks","text":"<p>The component affected by the smell:</p> <ul> <li>centralizes logic</li> <li>is a unique point of failure</li> <li>favors change ripple effects</li> </ul> <p>The smell violates the Modularity Principle defined by R. C. Martin.</p>"},{"location":"architectural_smells/#detection-strategy_2","title":"Detection strategy","text":"<p>The detection of Hublike Dependency (HL) in Arcan is done starting from the dependency graph of the system under analysis.</p> <p>HL, or simply \"hub\", is detected on both units and containers (e.g., classes and packages in Java). A hub is detected whenever a component in the system has \"too many\" incoming and outgoing dependencies (FanIn and FanOut, respectively). The \"too many\" is calculated using a dynamic threshold that is based on both a benchmark of 100+ systems (from the Qualitas Corpus) and the system under analysis. This allows us to not pick the the threshold arbitrarily, but instead use a data-driven approach.</p> <p>In particular, the threshold is calculated as <code>Threshold = Max(Threshold_System, Threshold_Benchmark)</code> where each individual <code>Threshold_*</code> is calculated using frequency analysis of the metric <code>TotalDeps</code> computed on the system and the benchmark separately, where <code>TotalDeps(x) = FanIn(x) + FanOut(x)</code> for all components <code>x</code>. The specific approach used to calculate the threshold is detailed here.</p>"},{"location":"architectural_smells/#unstable-dependency","title":"Unstable Dependency","text":"<p>Describes an architectural component that depends on other components that are less stable than itself. Instability (proneness to change) is measured using R. C. Martin\u2019s formula.</p>"},{"location":"architectural_smells/#drawbacks_3","title":"Drawbacks","text":"<p>The component affected by the smell can:</p> <ul> <li>favors change ripple effects</li> <li>be subjected to frequent changes</li> </ul> <p>The smell violates the Stable Dependency Principle defined by R. C. Martin.</p>"},{"location":"architectural_smells/#detection-strategy_3","title":"Detection strategy","text":"<p>The detection of Unstable dependency (UD) is done using the dependency graph of the system under analysis.</p> <p>UD is detected at the container-level (e.g., packages in Java) only, whenever a container depends on other containers that are less stable than itself. By Instability we mean R.C. Martin's Instability metric, whose definition can be found here. Instability calculates how easy it is for a container to change because of other containers (e.g. packages) in the system have changed. Namely, it is a measure of the risk of ripple change effects.</p> <p>The detection rule is the following: <code>Intability(x) &gt; Instability(y) + delta</code> for all containers <code>y</code> such that <code>x</code> depends upon, and  <code>x</code> is the container (e.g., package) that we are checking for the presence of UD.</p>"},{"location":"ci_integration/","title":"CI Integration","text":"<p>On top of running Arcan from the Dashboard, you can also attach Arcan to a Continuous Integration (CI) pipeline.</p> <p>Arcan offers a command line interface (CLI) that can be invoked from your CI pipeline and save the results on a remote database that can later be accessed through the dashboard to inspect the results.</p> <p>Below you will find the instructions on how to set up a CI pipeline that runs Arcan on the current commit. We provide a set of convenience scripts to make this job easier (write us an email!).</p>  <p>Warning</p> <p>Notice that this feature is not directly available in the 30-day free trial, you must request it on our website or by sending us an email.</p>"},{"location":"ci_integration/#instructions","title":"Instructions","text":""},{"location":"ci_integration/#requirements","title":"Requirements:","text":"<ul> <li>The Arcan CLI Jar (or Docker image) available on the CI runner machine</li> <li>Access to the source code (to do the analysis)</li> <li>Network access to the database the dashboard is connected to (to save the results)</li> </ul>"},{"location":"ci_integration/#step-1-configure-the-analysis","title":"Step 1: Configure the analysis","text":"<p>First, generate the analysis configuration:</p> <pre><code>cd arcan-ci\n./analyse-configs/mkconfig.sh ${PROJECT_NAME}\n</code></pre> <p>Then proceed editing the generated files accoding to your preference:</p> <pre><code>vim ./analyse-configs/${PROJECT}/descriptor.yml\nvim ./analyse-configs/${PROJECT}/source-filters.yml \n</code></pre> <p>Next, configure the connection to the results database by changing the following variables in <code>run-arcan.sh</code>:</p> <pre><code>JDBC_URL=arcan-postgres:5432/arcan\nJDBC_USERNAME=username\nJDBC_PASSWORD=password\n</code></pre>"},{"location":"ci_integration/#step-2-attach-the-runner-to-your-pipeline","title":"Step 2: Attach the runner to your pipeline","text":"<p>Add the following lines to your pipeline</p> <p><pre><code>./run-arcan.sh analyse path/to/project $LANGUAGE\n</code></pre> The script <code>./run-arcan.sh</code> is the main file of the repository that automates all the execution of a PoC.</p>"},{"location":"common-issues/","title":"Common issues &amp; solutions","text":""},{"location":"common-issues/#analysis-never-completes-hangs","title":"Analysis never completes / hangs","text":"<p>If you successfully added the project, started the analysis, but the dashboard keeps showing the spinning circle on your project, then it is likely that your analysis is hanging indefinitely. To check whether this is the case, close the dashboard and look at the server's logs (<code>docker logs -f arcan-trial-arcan-server-1</code>). Are there any logs that indicate progress? If all you see is <code>Quartz</code>-related logs and memory logs, then it is likely the analysis is stuck.</p> <p>This could be caused by any of these:</p> <ul> <li>You configured the analysis to analyse too many commits, namely, you set a wide timespan for the analysis (e.g. 10 years) and a low interval between commits (<code>&lt;30</code>). If this is the case, you should restart the server, delete the project, and re-run the analysis with a higher interval between commits (<code>&gt;60</code>). Alternatively, try running a snapshot (non-historical) analysis.</li> <li>You are running Arcan on an ARM processor (e.g. M1 Mac). Unfortunately, the dockerized version of Arcan does not support ARM processor architecture. The solution is to either run it on a supported processor architecture (i.e. x86/x64) or contact our support (see below).</li> <li>Arcan does not have sufficient memory. This is likely if you are trying to analyse a large project (250+ KLOC). You can try setting the environment variable <code>SERVER_JVM_MEMORY</code> to <code>16G</code> in the <code>docker-compose.yml</code> file.</li> <li>You are running Docker on a Windows host machine. Unfortunately, Docker on Windows is not as optimized as Windows on nix OSs, therefore, if you are trying to analyse large projects, you should consider using a nix OS.</li> </ul>"},{"location":"common-issues/#empty-project-no-metrics","title":"Empty project (no metrics)","text":"<p>If your project has no smells and/or the number of lines of code is 0 (i.e. KLOC), then it's likely that the analysis has not completed successfully.  Another symptom is that your project has an unexpected <code>A</code> rating.</p> <p>This problem may arise because of the following causes:</p> <ul> <li>You are analysing a Python project. Python is not yet fully supported and therefore there might be some projects/python features that are not yet fully supported, or handled correctly.</li> <li>You are trying to analyse a \"Local project\" and may have mispelled the path. Delete the project, create a new one, and ensure that the path is correctly spelled as <code>./projects/&lt;FOLDER_NAME&gt;</code>. Note the <code>.</code> at the beginning of the path. If you added the project correctly, you should be able to see the directory tree of the project after the project was created. Alternatively, consider using the \"Upload zip\" feature (available as of <code>2.8.5-RELEASE</code>).</li> <li>You are analysing a large project and the analysis has failed silently. In this case, try following the steps mentioned above in the \"Analysis never completes\" section.</li> </ul>"},{"location":"common-issues/#cannot-add-a-project","title":"Cannot add a project","text":"<p>If you cannot add to Arcan your project, then it might be because:</p> <ul> <li>You are trying to add a remote project but the URL or credentials are incorrect. If so, Arcan shows an error message that tells you which is the case (wrong credentials or wrong URL). Note that GitHub and GitLab do not support password authentication any longer in favor of Private Access Token (PAT). Please refer to GitHub's and GitLab's support pages on how to solve this problem. In both cases, to authenticate, you should paste the PAT in the Arcan's password field.</li> <li>You are trying to connect to a non-supported remote (Git incompatible). Arcan only supports the Git version control system, thus, if you want to analyse a non-Git project, you must download it on your local machine and either upload it as a zip, or use the \"Local project\" feature. Note that historical analysis is not supported in this case.</li> <li>You get the error <code>Connection refused. Upload size may exceed server's limit.</code>. In this case, it means you have to increase the allowed maximum size of uploads. To do so, change/add to the <code>docker-compose.yml</code> file, the following variable <code>SERVER_MAX_UPLOAD_SIZE: 500MB</code>, or whatever value you fancy.</li> <li>When adding a new project, the dropdown menu to select the programming language is empty. This is always caused by the fact that the dashboard cannot communicate with the server. Usually, this happens because you have installed Arcan on a remote machine (e.g., a virtual machine on a shared server) and use the dashboard from your local machine. By default, Arcan dashboard tries to reach the server at <code>localhost:8080</code> but the server is not running on your machine. To fix the problem, open <code>docker-compose.yml</code> and modify <code>REACT_APP_GRAPHQL_SERVER_URL</code> and <code>REACT_APP_PUBLIC_URL</code>  by replacing localhost with the IP address of your machine.</li> </ul>"},{"location":"common-issues/#some-information-is-missing-from-the-dependency-graph","title":"Some information is missing from the Dependency Graph","text":"<p>If the reverse engineering of dependencies looks incomplete and you think the analysis does not return the expected results, it might be due to the programming language under analysis. Check our compatibility page to verify Arcan's supported languages and consult our tips for specific language frameworks (e.g., Spring).</p>"},{"location":"common-issues/#cant-solve-a-problem","title":"Can't solve a problem?","text":"<p>Should you encounter a different problem, or you cannot solve any of the problems listed above, please consider opening an issue.</p>"},{"location":"common-issues/#need-more-help","title":"Need more help?","text":"<p>Feel free to contact our support team at support@arcan.tech or write us on Discord.</p>"},{"location":"compatibility/","title":"Supported Languages","text":"<p>The table below shows the programming languages and the versions supported by Arcan.</p>    Programming Language Supported versions Details     Java Java 17 and earlier Java 18+ may work.   C C17 and earlier C17 is the latest C standard.   C++ C++ 11 and earlier Keywords and syntax introduced is newer standards is not yet supported.   C# .NET 6 (via Mono)* .NET 7 (planned)* Projects that depend on Windows-only components are not supported (e.g. Windows Forms) by the trial and cloud versions.Custom installations are required in such cases.   Python Python 3.11 or earlier      <p>Warning</p> <p>* Arcan (trial and cloud) is distributed as a Docker container based on Linux. This severely limits the supported .NET projects. You could still analyse these projects but it is likely that the results are incomplete.</p>   <p>Tip</p> <p>To analyze Spring projects that instantiate beans dynamically and make heavy use of class hierarchies, Arcan needs to know what classes these beans are instances of. Typically, this information is contained within a <code>beans.xml</code> file(s), under the <code>**/resources</code> directory. Therefore, ensure that you both check the <code>Is this a Spring project?</code> checkbox and that the resources directory is selected when selecting the directories to be analysed.</p>"},{"location":"get_started/","title":"Get Started","text":""},{"location":"get_started/#download-and-install-arcan","title":"Download and Install Arcan","text":"<p>This is the quickstart guide to install and run the first analysis with Arcan. See the complete reference for the alternative installation without Docker.</p>"},{"location":"get_started/#requirements","title":"Requirements","text":"<ul> <li>Docker Engine &gt;= 20.10 (See https://docs.docker.com/engine/install)</li> <li>Docker Compose (See https://docs.docker.com/compose/install/)</li> </ul>"},{"location":"get_started/#how-to-run-arcan-locally","title":"How to run Arcan locally","text":"<ol> <li>Clone or download Arcan from Github. </li> <li>Fill in this form. You will receive the license at the provided email address.</li> <li>Open the email and download the attached <code>ArcanLicence_YYYYMMDD</code> licence file.</li> <li>Copy the <code>ArcanLicence_YYYYMMDD</code> licence file to the licences directory.</li> </ol>"},{"location":"get_started/#configure-the-environment","title":"Configure the environment","text":"<ol> <li>Copy the content of the .env.example file into a new file named <code>.env</code>.</li> <li>Change the value of the variable <code>ARCAN_LICENCE_FILENAME</code> with the name of licence file you copied in the licences directory.</li> </ol>"},{"location":"get_started/#run-arcan","title":"Run Arcan","text":"<ol> <li>To run the Arcan dashboard and the server, open your favourite terminal and navigate to the <code>/arcan-trial</code> folder. Within the folder execute: <code>docker compose up</code>.</li> <li>You will find the dashboard at http://localhost:3000.</li> </ol>  <p>Check the online videos to quickly learn how to use Arcan</p>  <ul> <li>Walkthrough video (ENG)</li> <li>Walkthrough video (ITA)</li> </ul>"},{"location":"get_started/#create-and-analyse-a-new-project","title":"Create and analyse a new project","text":"<p>Open Arcan dashboard at http://localhost:3000.</p> <p>Click the \"ADD NEW \" button to analyse a new project.</p> <ol> <li>Fill out the form on the \"Add new project\" page with the project's name and the programming language you want to analyse.</li> <li>Indicate the location of the project you want to analyse:<ul> <li>To analyse a remote project, use the remote repo URL when creating a new project. If the repository is private, remember to use a personal access token as password by ticking the \"Project requires authentication\" box (see How to analyse a remote repository for more info).</li> <li>To analyse a local project, copy the project folder into <code>/arcan-trial/projects</code>. When creating a new project, specify the path to analyse as follows: <code>./projects/&lt;folder_name&gt;</code> (see How to analyse a local repository for more info).</li> </ul> </li> <li>In \"Configure analysis\" click on \"ANALYSE\" and then \"CONTINUE\" to trigger the analysis. Once the analysis is completed, you can interact with the project card on the \"My projects\" page.</li> </ol>  <p>Note</p> <p>The trial version only supports C# projects compatible with .NET core 6.0.109. UWP, WPF, Windows Forms, EF6, and other Windows-dependant projects may not be analysed correctly (with no warning!) in the trial version.</p>"},{"location":"get_started/#ci-integration","title":"CI Integration","text":"<p>On top of running Arcan from the Dashboard, you can also attach Arcan to a Continuous Integration (CI) pipeline. For instance, you can add Arcan to your Gitlab or Github pipelines. See the instructions for additional details.</p>"},{"location":"get_started/#support","title":"Support","text":"<p>Need help or more information? There are many ways to contact us, choose your favorite here.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#glossary","title":"Glossary","text":""},{"location":"glossary/#project","title":"Project","text":"<p>The software project that you want to analyse with Arcan. It can be a folder containing source code or a Git repository (local or remote, e.g., hosted on Github).</p>"},{"location":"glossary/#version","title":"Version","text":"<p>Every time you change something in your project's source code, Arcan tracks a new version. You can run Arcan multiple times on different versions of the same project. Versions can be mapped to commits if you run Arcan on a Git repository.</p>"},{"location":"glossary/#analysis","title":"Analysis","text":"<p>A single execution of Arcan. An analysis is associated to a specific project\u2019s version.</p>"},{"location":"glossary/#page","title":"Page","text":"<p>A page of Arcan which contains dashboards or results.</p>"},{"location":"glossary/#architectural-smell","title":"Architectural smell","text":"<p>A software architecture problem affecting one or more parts of a codebase. See here for more information.</p>"},{"location":"glossary/#plot","title":"Plot","text":"<p>A graphic showing an insight or result.</p>"},{"location":"glossary/#dependency-graph","title":"Dependency Graph","text":"<p>The high-level representation of the project\u2019s architecture. The graph nodes represent architectural components and the graph edges represent the dependencies among them.</p>"},{"location":"glossary/#container","title":"Container","text":"<p>In Arcan, the architectural components at the highest level of abstraction. Language reference: </p> <ul> <li>Java: package=container;</li> <li>C/C++: folder=container;</li> <li>C#: namespace=container;</li> <li>Python: python package=container, directory=container.</li> </ul>"},{"location":"glossary/#unit","title":"Unit","text":"<p>In Arcan, the architectural components at the lowest level of abstraction. Language reference: </p> <ul> <li>Java: class=unit;</li> <li>C/C++: file=unit;</li> <li>C#: class=unit;</li> <li>Python: python module=unit, file=unit.</li> </ul>"},{"location":"inspect_project/","title":"Inspect a project","text":"<p>On the \"My projects\" page, you can find projects' cards. </p>"},{"location":"inspect_project/#project-card","title":"Project card","text":"<p>A project card shows: </p>     Number in Figure Card indicator name Description     \u2460 TD index The non-normalized amount of the TD generated by the architectural smells instances detected in the project. The higher the value, the more TD.   \u2461 TD rating Categorizes the TD score ranges into ranked categories going from A to F, with F being the worst possible rate (high accumulation of technical debt).   \u2462 TD score The percentile of the TD density for a benchmark of other systems analyzed by Arcan. The higher the value, the lower the TD density and the better the system's Example: 75 TD score = system has lower TD density than 75% of the systems in the benchmark.   \u2463 Technical debt evolution plot The trend of Technical Debt over time (green line).   \u2464 # Architectural Smells The number of smells resulting from the latest analysis.   \u2465 # LOC The number of lines of code (LOC) resulting from the latest analysis.    <p>Click on \"INSPECT\" or on the project's name to inspect the analysis results in detail.</p>"},{"location":"inspect_project/#overview-page","title":"Overview page","text":"<p>This page offers an overview of the analysed project's overall quality and Technical Debt.</p>     Number in Figure Overview indicator name Description     \u2460 Technical Debt Dispersion When high, it means that Technical Debt affects multiple and sparse portions of the code. When low, it means that Technical Debt is concentrated in a specific part of the code. The latest scenario is desirable because it is easier to address and solve Technical Debt when delimited.   \u2461 Technical Debt Spread The percentage of code affected by Technical Debt.   \u2462 Technical Debt The number of man-hours needed to remove the detected architectural smells.   \u2463 Design Complexity The ratio between the number of architectural dependencies and the number of architectural components. When high, the code is tangled and very coupled, going against the modularity and separation of concerns principle.   \u2464 Rigidity Computed with the Instability Metric defined by Robert Martin. When high, the code is sensitive to change proneness (a single change causes multiple cascade changes, making maintenance difficult).   \u2465 Technical Debt Evolution The trend of Technical Debt along the code history. The plot appears if more than one project version is analysed.   \u2466 List of analysed versions The list of analysed versions. If the analysed repository is a Git repository, the list reports the version (commit) hash."},{"location":"inspect_project/#assessment-page","title":"Assessment page","text":"<p>The table shows the list of architectural smells and some of their characteristics. </p> <p>Each row contains the data of a single instance of Architectural Smell.</p> <p>Click on the name of a column to sort by it.</p> <p>Table description:</p>     Number in Figure Column name Column description     \u2460 ID The unique identifier of the Architectural Smell.   \u2461 Smell Type The type of Architectural Smells. At the moment, Arcan detects four smells: \"Cyclic Dependency\", \"God Component\", \"Hub-Like Dependency\", and \"Unstable Dependency\".   \u2462 Tech debt index The amount of Technical Debt caused by the single Architectural Smell. The sum of the Technical Debt of each smell corresponds to the Technical Debt index reported in the project card.   \u2463 Severity The estimate of how much the Architectural Smell is critical for the project. Ranges from 1 to 10 where 10 is the worst possible case. It is based on the smell's characteristics (such as size and shape) and it is computed thanks to a proprietary machine learning model trained on manually-classified examples.   \u2464 Affected type The type of the affected component (e.g., for Java, class or package).   \u2465 Affected Elements The architectural components affected by the Architectural Smell.   \u2466 Size The number of Architectural Components affected by the Architectural Smell.    <p>\u2467 To manipulate the table (e.g., filter results) and download the table data, use the commands on the top-right of the table. \u2468 Click the arrow on the left to expand the row. Here you can find information about the detection rule applied and the values of the parameters that triggered the smell detection.</p>"},{"location":"inspect_project/#architectural-smell-graph-page","title":"Architectural smell graph page","text":"<p>Click on the pink button with the smell ID to open the graph representation of the Architectural Smell.</p> <p>At the top-left of the page, you can find the controls of the graph.</p> <ul> <li>\u2460 Reload graph layout</li> <li>\u2461 Centre graph</li> <li>\u2462 Turn zoom on/off</li> </ul> <p>At the top-right of the page, you can find additional controls for graph exploration.</p> <ul> <li>\u2463 Change the layout of the graph</li> <li>\u2464 Insert the name of a unit or container to quickly find it in the graph.</li> </ul> <p>\u2465 Click either an edge or a node to show the source code. The code causing the smell and that should be refactored is highlighed in red.</p>"},{"location":"inspect_project/#comprehension-page","title":"Comprehension page","text":""},{"location":"inspect_project/#graph-settings","title":"Graph settings","text":"<p>\u2460 On this page, you can select the specific parts of code that you want to plot in the graph. (2) Use SELECT ALL and UNSELECT ALL to select or unselect all the project's components quickly.</p> <p>\u2462 You can choose the types of components and dependencies to display on the right. </p> <p>Once the configuration is set up, click on the \"Graph\" tab to show the graph.</p>"},{"location":"inspect_project/#graph","title":"Graph","text":"<p>This page offers a high-level representation of the software architecture of the project under analysis. Depending on the settings you choose, you can produce different architectural views.</p> <p>Use ctrl + left mouse click to select and drag portions of graph.</p> <p>At the top-left of the page, you can find the controls of the graph.</p> <ul> <li>\u2460 Reload graph layout</li> <li>\u2461 Centre graph</li> <li>\u2462 Turn zoom on/off</li> </ul> <p>At the top-right of the page, you can find additional controls for graph exploration.</p> <ul> <li>\u2463 Change the layout of the graph</li> <li>\u2464 Insert the name of a unit or container to quickly find it in the graph.</li> </ul> <p>\u2465 Click a node to open the \"Neighbour graph\", that is a portion of the graph containing only the nodes next (depht=1) to the selected node.</p>"},{"location":"inspect_project/#neighbour-graph","title":"Neighbour graph","text":""},{"location":"inspect_project/#architectural-views","title":"Architectural views","text":"<p>We recommend the following settings instructions to generate a set of Architectural Views.</p> <p>Project tree</p> <p>Useful to investigate how the project\u2019s containers are nested one inside the other.</p> <ul> <li>Graph layout: KLAY</li> </ul>  <p>Project container dependencies</p> <p>Useful to investigate the dependencies between different project\u2019s containers.</p> <ul> <li>Graph layout: GRID</li> </ul>  <p>Project unit hierarchies</p> <p>Useful to investigate how the project\u2019s containers are nested one inside the other.</p> <ul> <li>Graph layout: KLAY</li> </ul>  <p>Project unit usage</p> <p>Useful to identify the most used units of the project.</p> <ul> <li>Graph layout: CONCENTRIC</li> </ul>"},{"location":"installation/","title":"Install Arcan","text":""},{"location":"installation/#requirements-for-native-docker-execution-mode","title":"Requirements for native Docker execution mode","text":"<ul> <li>Docker Engine &gt;= 20.10 (See https://docs.docker.com/engine/install)</li> <li>Docker Compose (See https://docs.docker.com/compose/install/)</li> </ul>"},{"location":"installation/#requirements-for-vm-based-docker-execution-mode-using-vagrant","title":"Requirements for VM-based Docker execution mode using Vagrant","text":"<ul> <li>Vagrant</li> <li>VirtualBox</li> </ul>"},{"location":"installation/#how-to-run-arcan-locally","title":"How to run Arcan locally","text":"<p>First, Clone or download Arcan from Github. Then, follow the instructions below.</p>"},{"location":"installation/#obtain-the-licence-file","title":"Obtain the licence file","text":"<ul> <li>Fill in this form. You will receive the license at the provided email address.</li> <li>Open the email and download the attached <code>ArcanLicence_YYYYMMDD</code> licence file.</li> <li>Copy the <code>ArcanLicence_YYYYMMDD</code> licence file to the licences directory.</li> </ul>"},{"location":"installation/#configure-the-environment","title":"Configure the environment","text":"<ul> <li>Copy the content of the .env.example file into a new file named <code>.env</code>.</li> <li>Change the value of the variable <code>ARCAN_LICENCE_FILENAME</code> with the name of licence file you copied in the licences directory.</li> </ul>"},{"location":"installation/#run-arcan-with-native-docker-execution-mode","title":"Run Arcan with native Docker execution mode","text":"<ul> <li>To run the Arcan dashboard and the server, open your favourite terminal and navigate to the <code>/arcan-trial</code> folder. Within the folder execute: <code>docker compose up</code>.</li> <li>You will find the dashboard at http://localhost:3000.</li> <li>To analyse a remote project, simply use the remote repo url when creating a new project. If the repo is private, remember to use a personal access token as password (see the documentation for more info).</li> <li>To analyse a local project, copy the project folder into <code>/arcan-trial/projects</code>. When creating a new project, specify the path to analyse as follows: <code>./projects/&lt;folder_name&gt;</code>  (see the documentation for more info).</li> </ul>"},{"location":"installation/#run-arcan-with-vm-based-docker-execution-mode-using-vagrant","title":"Run Arcan with VM-based Docker execution mode using Vagrant","text":"<ul> <li>To run the Arcan dashboard and the server, open your favourite terminal and navigate to the <code>/arcan-trial</code> folder. Within the folder execute: <code>vagrant up</code>.</li> <li>You will find the dashboard at http://localhost:3000.</li> <li>To analyse a remote project, use the remote repo URL when creating a new project. If the repository is private, remember to use a personal access token as password by ticking the \"Project requires authentication\" box (see How to analyse a remote repository for more info).</li> <li>To analyse a local project, copy the project folder into <code>/arcan-trial/projects</code>. When creating a new project, specify the path to analyse as follows: <code>./projects/&lt;folder_name&gt;</code> (see How to analyse a local repository for more info).</li> </ul>"},{"location":"installation/#optional","title":"Optional","text":"<p>Should you need to update to the latest Arcan version:</p> <ul> <li>Open the <code>.env</code> file. Change the value of the variable <code>ARCAN_DASHBOARD_VERSION</code> with the latest Arcan dashboard version tag. You can find the latest version here.</li> <li>Change the value of the variable <code>ARCAN_SERVER_VERSION</code> with the latest Arcan server version tag. You can find the latest version here.</li> </ul>"},{"location":"interpretation/","title":"Results interpretation","text":""},{"location":"interpretation/#technical-debt-score","title":"Technical Debt score","text":"<p>The following table illustrates how to interpret the Technical Debt score value.</p>    Score Ranking Description     A Better than 80-100% of projects Best possible scenario. Little to no technical debt was detected. Keep monitoring to ensure new code does not introduce any.   B Better than 60%-80% of projects Technical debt is under control, but some Architectural Smells might become problematic in the near future.   C Better than 40%-60% of projects There\u2019s an average amount of technical debt in the system, with some Architectural Smells being critical. These could be ideal candidates for refactorings. The system is relatively maintainable, but maintainability is starting to get affected.   D Better than 20%-40% of projects There\u2019s a conspicuous amount of technical debt in the system, although the system is still maintainable. The suggested course of action is to identify a few critical smells and refactor them (either incrementally or all at once).   F Better than 0%-20% of the projects The system is riddled with technical debt, and maintainability is greatly affected. A major refactoring should be considered, although, given the amount of technical debt, it could not be possible."},{"location":"interpretation/#how-to-identify-refactoring-opportunities","title":"How to identify refactoring opportunities:","text":"<ol> <li>Head to the \u201cAssessment\u201d page of your project.</li> <li>Order the Architectural Smells by highest Severity or highest TechDebt Index. This will let you identify the most critical smells in your project:</li> <li>Identify one or two smells to focus on. What you can do next:<ul> <li>Invest time now to save on maintenance by removing the smell that gives you the most problems. In that case, see our refactoring suggestions and best practices. OR</li> <li>Save time now by not refactoring, but be aware that future maintenance will be harder. In this case, we suggest integrating Arcan with your CI pipeline and running it twice weekly and before new releases to prevent the introduction of additional Technical Debt.</li> </ul> </li> </ol> <p>Once you discover the presence of new smells, you should tackle them immediately. Smells in the first phase of their life are easier to refactor than older ones.</p>"},{"location":"metrics/","title":"Metrics","text":"<p>Along with Architectural Smells, Arcan computes a set of software metrics. This page reports the complete list of the metrics that can be computed with Arcan.</p>    Name Scope Definition Ref     Abstractness Package The number of abstract classes (and interfaces) divided by the total number of types in a package. This metric range is [0,1], where 0 indicates a completely concrete package and 1 indicates a completely abstract package. [1]   Instability Package The package\u2019s resilience to change. This metric range is [0,1], where 0 indicates that the package is completely stable and 1 completely unstable. This metric range is [0,1], where 0 indicates that the package is directly on the main sequence whereas 1 indicates that the package is as far away as possible from the main sequence. Small numbers are indicators of good packaging design. [1]   Distance from main sequence Package The package\u2019s balance between abstractness and stability. [1]   Fan In Package, Class The number of ingoing dependences of a class. [1]   Fan Out Package, Class The number of outgoing dependences of a class. [1]   Lines of code Package, Class The number of lines of code of a given class or package. The metric does not count blank lines and commented lines.    Change has occurred (CHO) Package, Class Given the project history (Git commits), it measures whether a class or package has changed or not in the current commit with respect to the previous commit. [2]   Code churn (TACH) Package, Class Givent the history of a project (git commits), it is the sum of added lines of code, deleted lines, and twice the changed lines since the last commit for a given class or package. [2]   PageRank Package, Class Estimates whether an architectural smell is located in an important part of the project, where the importance is evaluated according to how many parts of a project depend on the one involved in the architectural smell. The metric is based on the one implemented by Brin and Page. [3]   Coupling between objects Class Number of classes to which a class is coupled, that is the number of classes that a class references. The coupling beetween classes should be low, otherwise it will difficult to make changes to the system without change a lot of classes. [4]   Depth of inheritance Class The depth of inheritance tree (DIT) is a code metric that is specific to object-oriented programming.  It measures the maximum length between a node and the root node in a class hierarchy. The minimum value of DIT for a class is 1. The metric range is [0, infinite].  0 indicates a root. The minimum value for a class is 1. A value &gt; 1 indicates that there is code reuse through inheritance.  If there is a majority of values below 2, it may represent poor exploitation of the advantages of OO design and inheritance.  It is recommended a maximum value of 5 since deeper trees constitute greater design complexity. [4]   Number of children Class The number of classes inheriting from a given class. [4]   Number of architectural smells Project The total number of architectural smells detected by Arcan in the analysed project.    Number of components Project The sum of number of classes and packages of the analysed project.     <p>[1] R. C. Martin, J. Grenning, S. Brown, K. Henney, and J. Gorman, Clean architecture: a craftsman\u2019s guide to software structure and design. Prentice Hall, 2018.</p> <p>[2] M. O. Elish and M. A. R. Al-Khiaty, \u201cA suite of metrics for quantifying historical changes to predict future change-prone classes in object-oriented software,\u201d Journal of software: Evolution and Process, vol. 25, pp. 407\u2013437, may 2013.</p> <p>[3] R. Roveda, F. A. Fontana, I. Pigazzini, and M. Zanoni, \u201cTowards an architectural debt index,\u201d in Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018, pp. 408\u2013416, IEEE, aug 2018.</p> <p>[4] S. R. Chidamber and C. F. Kemerer, \u201cA metrics suite for object oriented designa metrics suite for object oriented design,\u201d PhD Proposal, vol. 1, pp. 476\u2013493, 1992.</p>"},{"location":"refactoring/","title":"Refactoring best practices","text":""},{"location":"refactoring/#cyclic-dependency","title":"Cyclic Dependency","text":"<p>The main goal when refactoring a cycle is to break one or more dependencies. </p>"},{"location":"refactoring/#refactoring-of-cyclic-dependencies-affecting-units","title":"Refactoring of Cyclic Dependencies affecting units","text":"<p>To better exemplify the techniques, we will consider a cycle made of two units, A and B. The techniques can be applied to break larger cycles by iterating the refactoring steps.</p>   Figure 1: graphical example of Cyclic Dependency smell  <p>Depending on the characteristics of the dependency to break, different refactoring techniques can be adopted:</p> <ul> <li>Move function: move one or more functions (e.g., Java method) into the target unit. This technique is feasible when the function is not invoked within the unit itself and the only problem is that the function is misplaced.</li> <li>Extract unit: create a new unit and place all the code responsible for the cyclic dependency in it. </li> </ul>   Figure 2: example of \u201cExtract unit\u201d refactoring technique  <ul> <li>Create interface: Introduce an interface for one of the abstractions involved in the cycle. The new interface contains all methods that A calls on B. A only knows the interface that is implemented by B. Mind that this technique can be used if A only uses B and does not generate instances of B.</li> </ul>   Figure 3: example of \u201cCreate interface\u201d refactoring technique  <ul> <li>Merge units: if the units involved in the cycle represent a semantically single object, merge the units into a single unit.</li> </ul>"},{"location":"refactoring/#refactoring-of-cyclic-dependencies-affecting-containers","title":"Refactoring of Cyclic Dependencies affecting containers","text":"<p>In the case of Cyclic Dependencies affecting containers (e.g., Java packages), you can face two possibilities:</p> <ul> <li>The cycle is caused by a cycle among units. In such a case, you can apply the same techniques for breaking cycles among units.</li> <li>The cycle only exists among packages. In such a case, it is likely that there is a misplaced unit of function. You must move one of the pieces of code generating the dependency. You can follow two ways:<ul> <li>Apply move unit from one container to another in the case an entire unit or units are misplaced;</li> <li>Apply move function from one unit to another in the case one or more functions are misplaced.</li> </ul> </li> </ul>   Figure 4_a: example of container cycle caused by a cycle among units - Figure 4_b: example of container cycle caused by misplaced code"},{"location":"refactoring/#god-component","title":"God Component","text":""},{"location":"refactoring/#refactoring-of-god-component-affecting-containers","title":"Refactoring of God Component affecting containers","text":"<p>The refactoring of God Components affecting containers can be carried out by splitting the content of the container into additional containers. First, you must inspect their dependencies to identify sets of cohesive units to separate. Privilege units that: </p> <ul> <li>share dependencies with a high \u201cweight\u201d value. This means they are strongly coupled. You can find the weight metric on Arcan.  </li> <li>are involved in Cyclic Dependencies. </li> </ul> <p>Once you identify sets of cohesive units, move them into newly created containers. Mind that you could unintentionally add Cyclic Dependencies among containers while moving.</p>"},{"location":"refactoring/#refactoring-of-god-component-affecting-units","title":"Refactoring of God Component affecting units","text":"<p>The presence of a God component affecting containers likely implies the presence of a God Component affecting units too. In such a case, the main aim when refactoring a God component affecting units is to split it up. To do so, you can apply different techniques:</p> <ul> <li>Extract function: often, units affected by God Components contain duplicated code. You must identify the duplicated code and extract a function in this case. Then, use the function in each part of the code where the code was duplicated.</li> <li>Extract unit: if the affected unit implements different behaviors simultaneously, parts of the unit can be extracted and put into a new, separated unit. </li> </ul>"},{"location":"refactoring/#hub-like-dependency","title":"Hub-Like Dependency","text":"<p>Removing a hub means reassigning the responsibilities and roles of some classes in order to redesign their dependencies. It would ideal to split up the responsibilities of the hub across both new and already existing abstractions, so that the number of dependencies is reduced.</p> <p>To remove Hub-Like Dependency, the following refactoring techniques can come in handy:</p> <ul> <li>Extract method: Create a new method with a similar body in another class. Either turn the old method into a simple delegation or remove it altogether.</li> <li>Extract abstract unit: Create an abstract unit and move the common features to the abstract unit.</li> <li>Extract unit: Create a new unit and move the relevant fields and functions from the old unit into the new unit.</li> </ul> <p>When Arcan detects that a unit is affected by a Hub-Like Dependency, to remove it, you can apply the following steps:</p> <ol> <li>Identify the centre of the hub, that is the component having a large number of incoming and outgoing dependencies. You can find this information on Arcan.</li> <li>Work on the centre using the refactoring techniques mentioned above.</li> <li>Consider the following: <ul> <li>If you are working on a unit, try identify at least two different roles/responsibilities, then, for each one of them, create a new unit by applying \"Extract unit\". Additionally, you can also extract common functions/fields into a new superclass using \"Extract Superclass\". </li> <li>If you are working on a function, watch the incoming and the outgoing dependencies used and try to create a cohesive set of responsibilities for the function. Split the function into several different functions, each one with a different responsibility.</li> </ul> </li> </ol> <p>To remove the hub, you may also need to move the function into a different unit (you may consider creating a new unit, don not force cohesion) and thus the coupling should decrease.</p>"},{"location":"refactoring/#unstable-dependency","title":"Unstable Dependency","text":"<p>Refactoring best practices for Unstable Dependency smell are coming soon.</p>"},{"location":"support/","title":"Community and Support","text":"<p>Are you having problems installing or using Arcan? Reach out, we are here to help.</p>"},{"location":"support/#technical-support","title":"Technical support","text":"<ul> <li>Github public issue repository: add an issue here if you find a bug or want to suggest an improvement.</li> <li>Discord chat: connect to our #tech-support channel to get fast responses.</li> <li>support@arcan.tech: if you need additional support.</li> </ul>"},{"location":"support/#contacts","title":"Contacts","text":"<ul> <li>Website</li> <li>info@arcan.tech: for any request of information.</li> <li>sales@arcan.tech: to open a conversation with our sales team.</li> </ul>"}]}